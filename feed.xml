<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" hreflang="zh" /><updated>2018-08-15T09:58:47+00:00</updated><id>/</id><title type="html">WaTe</title><subtitle>朝闻道， 夕死可矣
</subtitle><author><name>Shenglong</name><email>liushenglong@wemarklinks.com</email></author><entry><title type="html">学习PLC: 使用西门子 S7-200</title><link href="/2018/08/15/Learning-PLC-02.html" rel="alternate" type="text/html" title="学习PLC: 使用西门子 S7-200" /><published>2018-08-15T00:00:00+00:00</published><updated>2018-08-15T00:00:00+00:00</updated><id>/2018/08/15/Learning-PLC-02</id><content type="html" xml:base="/2018/08/15/Learning-PLC-02.html">&lt;h5 id=&quot;s7-200数据的存取&quot;&gt;S7-200数据的存取&lt;/h5&gt;
&lt;p&gt;储存器储存不同类型的数值范围&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;数制&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;字节(B)&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;字(W)&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;双字(D)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;无符号整数&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0到255 0到FF&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0到FFFF&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0到FFFF FFFF&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;符号整数&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-128到127&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-32768到32767&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-2147483648到2147483647&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;实数IEEE 32位浮点数&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;位寻址: 储存器标识符 + 字节地址 + (.) + 字节的位号&lt;/p&gt;

&lt;p&gt;常用的储存区: (V, I, Q, M, S, L及SM) 中的数据.若要访问CPU中的一个字节, 字或双字,也必须以类似位寻址的方式给出地址, 包括存储器标识符, 数据大小以及该字节的起始位置;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    V B 100                  V W 100 
    | | |_ 字节地址           | | |_ 单字地址
    | |___ 访问一个字节       | |___ 访问一个单字
    |_____ 区域标识符         |_____ 区域标识符
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;存储器分类&quot;&gt;存储器分类&lt;/h5&gt;
&lt;h6 id=&quot;过程映像输入寄存器-i&quot;&gt;过程映像输入寄存器: I&lt;/h6&gt;
&lt;p&gt;在每次扫描周期的开始, CPU对物理输入点进行采样, 并将采样值写入输入过程映像寄存器中, 可以按位、字节、字或双字来存取输入过程映像寄存器中的数据；&lt;/p&gt;

&lt;h6 id=&quot;过程映像输出寄存器-q&quot;&gt;过程映像输出寄存器： Q&lt;/h6&gt;
&lt;p&gt;在每次扫描周期的结尾， CPU将输出过程映像寄存器中的数值复制到物理输出点上。 可以按位， 字节， 字或双字来存取存取输出过程映像寄存器；&lt;/p&gt;

&lt;h6 id=&quot;变量储存区-v&quot;&gt;变量储存区： V&lt;/h6&gt;
&lt;p&gt;可以用V储存器存储程序过程中控制逻辑操作的中间结果，也可以用它来保存于工序或任务组相关的其他数据。&lt;/p&gt;

&lt;h6 id=&quot;位存储区-m&quot;&gt;位存储区： M&lt;/h6&gt;
&lt;p&gt;可以用位存储区位控制继电器存储中间操作状态和控制信息。&lt;/p&gt;

&lt;h6 id=&quot;定时器存储区-t&quot;&gt;定时器存储区: T&lt;/h6&gt;
&lt;p&gt;定时器可用于时间累计, 其分辨率分为1ms, 10ms和100ms三种,定时器有两个变量:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;当前值: 16位有符号整数, 储存由定时器计数的时间量;&lt;/li&gt;
  &lt;li&gt;定位器位: 在比较当前值和预设值后, 可设置或清除该位, 预设值是定时器指令的一部分.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;计数器存储区-c&quot;&gt;计数器存储区: C&lt;/h6&gt;
&lt;p&gt;提供三种类型的计数器, 可计算计数器输入上的低-高跳变时间: 一种类型仅计算向上事件, 一种类型仅计算向下事件, 还有一种类型计算向上和向下两种事件. 计数器有两种形式:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;当前值: 该16位有符号整数可存储累加计数;&lt;/li&gt;
  &lt;li&gt;计数器位: 在比较当前值和预设值后, 可设置或清除该位, 预设值是计数器指令的一部分;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;高速计数器-hc&quot;&gt;高速计数器: HC&lt;/h6&gt;
&lt;p&gt;高速计数器对告诉事件计数, 它独立于CPU的扫描周期. 高速计数器有一个32位的有符号整数计数值(或当前值). 若要存取高速计数器中的值, 则给出高速计数器的地址, 即存储器类型(HC)加上计数器号. 高速计数器当前值是只读数据, 仅可以作为双字(32位)来寻址.&lt;/p&gt;

&lt;h6 id=&quot;累加器-ac&quot;&gt;累加器: AC&lt;/h6&gt;
&lt;p&gt;累加器是可以像存储器一样使用的读写设备. 可以用它来向子程序传递参数, 也可以从子程序返回参数, 以及用来存储计算的中间值. S7-200 提供4个32位累加器(AC0 ~ AC3);&lt;/p&gt;

&lt;h6 id=&quot;特殊存储器-sm&quot;&gt;特殊存储器: SM&lt;/h6&gt;
&lt;p&gt;SM位为CPU与用户程序之间传递信息提供了一种手段. 可以使用这些位来选择和控制S7-200CPU的某些特殊功能;&lt;/p&gt;

&lt;h6 id=&quot;局部存储区-l&quot;&gt;局部存储区: L&lt;/h6&gt;
&lt;p&gt;S7-200有64个字节的局部存储器, 其中60个字节可以用作临时存储器或者给子程序传递参数;&lt;/p&gt;

&lt;p&gt;局部存储器和变量存储器很相似, 但有一处区别. 变量存储器是全局有效的, 而局部存储器只在局部有效. 全局是指同一个储存器可以被任何程序存取(主程序, 子程序和中断程序). 局部是指存储区和特定的程序相关联. S7-200给主程序分配64个字节局部存储器; 给每一级子程序嵌套分配64个字节的局部存储区; 同样,给中断程序分配64个字节局部存储区;&lt;/p&gt;

&lt;p&gt;S7-200根据需要分配局部存储区. 也就是说, 当主程序执行时分配给子程序和中断程序的局部存储区是不存在的(并未分配)当发生中断或子程序调用时才会进行分配.&lt;/p&gt;

&lt;h6 id=&quot;模拟量输入-ai&quot;&gt;模拟量输入: AI&lt;/h6&gt;
&lt;p&gt;S7-200将模拟量值(如温度,电压)转换成一个字长(16位)的数字量. 可以用区域标识符(AI), 数据长度(W)及字节的 起始地址来存取这些值. 因为模拟输入量位一个字长, 且从偶数位开始. 所以必须用偶数字节地址(如AIW2, AIW4)来存取这些值. &lt;strong&gt;模拟量输入为只读数据&lt;/strong&gt;&lt;/p&gt;</content><author><name>Shenglong</name><email>liushenglong@wemarklinks.com</email></author><category term="PLC" /><category term="Learing PLC" /><category term="S7-200" /><summary type="html">S7-200数据的存取 储存器储存不同类型的数值范围 数制 字节(B) 字(W) 双字(D) 无符号整数 0到255 0到FF 0到FFFF 0到FFFF FFFF 符号整数 -128到127 -32768到32767 -2147483648到2147483647 实数IEEE 32位浮点数       位寻址: 储存器标识符 + 字节地址 + (.) + 字节的位号 常用的储存区: (V, I, Q, M, S, L及SM) 中的数据.若要访问CPU中的一个字节, 字或双字,也必须以类似位寻址的方式给出地址, 包括存储器标识符, 数据大小以及该字节的起始位置; V B 100 V W 100 | | |_ 字节地址 | | |_ 单字地址 | |___ 访问一个字节 | |___ 访问一个单字 |_____ 区域标识符 |_____ 区域标识符 存储器分类 过程映像输入寄存器: I 在每次扫描周期的开始, CPU对物理输入点进行采样, 并将采样值写入输入过程映像寄存器中, 可以按位、字节、字或双字来存取输入过程映像寄存器中的数据； 过程映像输出寄存器： Q 在每次扫描周期的结尾， CPU将输出过程映像寄存器中的数值复制到物理输出点上。 可以按位， 字节， 字或双字来存取存取输出过程映像寄存器； 变量储存区： V 可以用V储存器存储程序过程中控制逻辑操作的中间结果，也可以用它来保存于工序或任务组相关的其他数据。 位存储区： M 可以用位存储区位控制继电器存储中间操作状态和控制信息。 定时器存储区: T 定时器可用于时间累计, 其分辨率分为1ms, 10ms和100ms三种,定时器有两个变量: 当前值: 16位有符号整数, 储存由定时器计数的时间量; 定位器位: 在比较当前值和预设值后, 可设置或清除该位, 预设值是定时器指令的一部分. 计数器存储区: C 提供三种类型的计数器, 可计算计数器输入上的低-高跳变时间: 一种类型仅计算向上事件, 一种类型仅计算向下事件, 还有一种类型计算向上和向下两种事件. 计数器有两种形式: 当前值: 该16位有符号整数可存储累加计数; 计数器位: 在比较当前值和预设值后, 可设置或清除该位, 预设值是计数器指令的一部分; 高速计数器: HC 高速计数器对告诉事件计数, 它独立于CPU的扫描周期. 高速计数器有一个32位的有符号整数计数值(或当前值). 若要存取高速计数器中的值, 则给出高速计数器的地址, 即存储器类型(HC)加上计数器号. 高速计数器当前值是只读数据, 仅可以作为双字(32位)来寻址. 累加器: AC 累加器是可以像存储器一样使用的读写设备. 可以用它来向子程序传递参数, 也可以从子程序返回参数, 以及用来存储计算的中间值. S7-200 提供4个32位累加器(AC0 ~ AC3); 特殊存储器: SM SM位为CPU与用户程序之间传递信息提供了一种手段. 可以使用这些位来选择和控制S7-200CPU的某些特殊功能; 局部存储区: L S7-200有64个字节的局部存储器, 其中60个字节可以用作临时存储器或者给子程序传递参数; 局部存储器和变量存储器很相似, 但有一处区别. 变量存储器是全局有效的, 而局部存储器只在局部有效. 全局是指同一个储存器可以被任何程序存取(主程序, 子程序和中断程序). 局部是指存储区和特定的程序相关联. S7-200给主程序分配64个字节局部存储器; 给每一级子程序嵌套分配64个字节的局部存储区; 同样,给中断程序分配64个字节局部存储区; S7-200根据需要分配局部存储区. 也就是说, 当主程序执行时分配给子程序和中断程序的局部存储区是不存在的(并未分配)当发生中断或子程序调用时才会进行分配. 模拟量输入: AI S7-200将模拟量值(如温度,电压)转换成一个字长(16位)的数字量. 可以用区域标识符(AI), 数据长度(W)及字节的 起始地址来存取这些值. 因为模拟输入量位一个字长, 且从偶数位开始. 所以必须用偶数字节地址(如AIW2, AIW4)来存取这些值. 模拟量输入为只读数据</summary></entry><entry><title type="html">学习PLC: 使用西门子S7-200 01</title><link href="/2018/08/15/Learning-PLC-01.html" rel="alternate" type="text/html" title="学习PLC: 使用西门子S7-200 01" /><published>2018-08-15T00:00:00+00:00</published><updated>2018-08-15T00:00:00+00:00</updated><id>/2018/08/15/Learning-PLC-01</id><content type="html" xml:base="/2018/08/15/Learning-PLC-01.html">&lt;p&gt;S7-200&lt;/p&gt;
&lt;h4 id=&quot;s7-200-如何执行控制逻辑&quot;&gt;S7-200 如何执行控制逻辑&lt;/h4&gt;
&lt;h5 id=&quot;基本流程&quot;&gt;基本流程&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;CPU读取输入状态，将输入状态复制到&lt;strong&gt;过程映像输入寄存器&lt;/strong&gt;；&lt;/li&gt;
  &lt;li&gt;执行程序中的控制逻辑: S7-200执行程序指令, 并在不同的储存区存储数值；&lt;/li&gt;
  &lt;li&gt;处理通讯请求: 执行通讯任务；&lt;/li&gt;
  &lt;li&gt;执行CPU自检诊断: 确保固件,程序储存器和所有扩展模块正常运行;&lt;/li&gt;
  &lt;li&gt;写入输出: 将储存在过程映像输出寄存器中的数值写入到实际输出;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;读取输入&quot;&gt;读取输入&lt;/h6&gt;
&lt;p&gt;&lt;em&gt;数字量输入&lt;/em&gt;: 每个扫描周期从数字量输入的当前值开始读取, 然后将这些值写入到过程映像输入寄存器;
&lt;em&gt;模拟量输入&lt;/em&gt;: 除非启用了模拟量输入过滤, 否则S7-200在正常扫描周期中不更新来自扩展模块的模拟量输入;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;模拟量滤波能获取到比较稳定的信号;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Question: 什么是数字量和模拟量&lt;/code&gt;&lt;/p&gt;

&lt;h6 id=&quot;执行程序&quot;&gt;执行程序&lt;/h6&gt;
&lt;p&gt;在扫描周期的执行程序阶段, CPU从头至尾执行应用程序. 在程序或中断程序执行过程当中, 可以立即调用IO指令访问输入与输出;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;如果程序中使用了中断, 中断程序会作为程序一部分储存. 但是中断程序不作为扫描周期的一部分来执行,只有在中断事件发生时才会调用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果在程序中使用了子程序, 子程序会作为程序的一部分储存. 主程序调用子程序时, 嵌套深度是8. 由中断程序开始时子程序嵌套深度为1;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;局部储存区 L&lt;/code&gt;&lt;/p&gt;

&lt;h6 id=&quot;写数字输出&quot;&gt;写数字输出&lt;/h6&gt;
&lt;p&gt;在每个扫描周期结尾, CPU把储存在输出映像寄存器中的数据写到数字输出点. (模拟量输出直接刷新, 与扫描周期无关)&lt;/p&gt;</content><author><name>Shenglong</name><email>liushenglong@wemarklinks.com</email></author><category term="PLC" /><category term="Learning PLC" /><category term="S7-200" /><summary type="html">S7-200 S7-200 如何执行控制逻辑 基本流程 CPU读取输入状态，将输入状态复制到过程映像输入寄存器； 执行程序中的控制逻辑: S7-200执行程序指令, 并在不同的储存区存储数值； 处理通讯请求: 执行通讯任务； 执行CPU自检诊断: 确保固件,程序储存器和所有扩展模块正常运行; 写入输出: 将储存在过程映像输出寄存器中的数值写入到实际输出; 读取输入 数字量输入: 每个扫描周期从数字量输入的当前值开始读取, 然后将这些值写入到过程映像输入寄存器; 模拟量输入: 除非启用了模拟量输入过滤, 否则S7-200在正常扫描周期中不更新来自扩展模块的模拟量输入; 模拟量滤波能获取到比较稳定的信号; Question: 什么是数字量和模拟量 执行程序 在扫描周期的执行程序阶段, CPU从头至尾执行应用程序. 在程序或中断程序执行过程当中, 可以立即调用IO指令访问输入与输出; 如果程序中使用了中断, 中断程序会作为程序一部分储存. 但是中断程序不作为扫描周期的一部分来执行,只有在中断事件发生时才会调用 如果在程序中使用了子程序, 子程序会作为程序的一部分储存. 主程序调用子程序时, 嵌套深度是8. 由中断程序开始时子程序嵌套深度为1; 局部储存区 L 写数字输出 在每个扫描周期结尾, CPU把储存在输出映像寄存器中的数据写到数字输出点. (模拟量输出直接刷新, 与扫描周期无关)</summary></entry><entry><title type="html">Hash算法</title><link href="/2018/08/04/Hash%E7%AE%97%E6%B3%95.html" rel="alternate" type="text/html" title="Hash算法" /><published>2018-08-04T00:00:00+00:00</published><updated>2018-08-04T00:00:00+00:00</updated><id>/2018/08/04/Hash%E7%AE%97%E6%B3%95</id><content type="html" xml:base="/2018/08/04/Hash%E7%AE%97%E6%B3%95.html">&lt;h3 id=&quot;散列算法&quot;&gt;散列算法&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;散列算法(Hash Function)&lt;/em&gt; 又称&lt;em&gt;散列函数、哈希算法&lt;/em&gt;, 是一种从任何数据中创建小的数字”指纹”的方法。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;原理&lt;/em&gt; 散列函数把数据压缩成_固定格式_的摘要, 使得数据量变小。该函数将数据打乱混合， 重新创建一个叫做散列值的指纹。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;散列冲突&lt;/em&gt; 又称 “散列碰撞”, 所有散列函数都有如下特性:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;如果两个散列值是不相同的, 那么这两个散列值的原始数据必定是不同的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个特性是因为散列函数都具有_确定性_。然而如果两个散列值相同，两个数据值却可能不同，这种情况称为”散列碰撞”.&lt;/p&gt;

&lt;p&gt;散列函数必须具有不可逆性。&lt;/p&gt;

&lt;h3 id=&quot;散列算法的常见应用&quot;&gt;散列算法的常见应用&lt;/h3&gt;
&lt;p&gt;散列函数应用场景广泛, 通常都是为某一目的专门设计的;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;加密&lt;/em&gt; &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8&quot;&gt;Wiki 密码散列函数&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;加密散列函数的输入数据通常被称为消息, 输出结果被称为&lt;strong&gt;摘要(digest)&lt;/strong&gt;, 主要保证消息在 传输过程中未被篡改;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;理想的加密散列函数应具备的特性:
    &lt;ul&gt;
      &lt;li&gt;高效性;&lt;/li&gt;
      &lt;li&gt;不可逆;&lt;/li&gt;
      &lt;li&gt;不可能在不改动散列数值的情况下修改消息内容;&lt;/li&gt;
      &lt;li&gt;对于不同的消息, 不能给出相同的散列值;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;保证消息的完整性.&lt;/li&gt;
  &lt;li&gt;散列表.&lt;/li&gt;
  &lt;li&gt;错误检测与矫正&lt;/li&gt;
  &lt;li&gt;语音识别&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/2018/08/04/BKDRHash算法&quot;&gt;BKDRHash算法及解析&lt;/a&gt;&lt;/p&gt;</content><author><name>Shenglong</name><email>liushenglong@wemarklinks.com</email></author><category term="算法" /><category term="Hash" /><summary type="html">散列算法 散列算法(Hash Function) 又称散列函数、哈希算法, 是一种从任何数据中创建小的数字”指纹”的方法。 原理 散列函数把数据压缩成_固定格式_的摘要, 使得数据量变小。该函数将数据打乱混合， 重新创建一个叫做散列值的指纹。 散列冲突 又称 “散列碰撞”, 所有散列函数都有如下特性: 如果两个散列值是不相同的, 那么这两个散列值的原始数据必定是不同的。 这个特性是因为散列函数都具有_确定性_。然而如果两个散列值相同，两个数据值却可能不同，这种情况称为”散列碰撞”. 散列函数必须具有不可逆性。 散列算法的常见应用 散列函数应用场景广泛, 通常都是为某一目的专门设计的; 加密 Wiki 密码散列函数 加密散列函数的输入数据通常被称为消息, 输出结果被称为摘要(digest), 主要保证消息在 传输过程中未被篡改; 理想的加密散列函数应具备的特性: 高效性; 不可逆; 不可能在不改动散列数值的情况下修改消息内容; 对于不同的消息, 不能给出相同的散列值; 保证消息的完整性. 散列表. 错误检测与矫正 语音识别 BKDRHash算法及解析</summary></entry><entry><title type="html">初识Docker</title><link href="/2018/08/04/Docker.html" rel="alternate" type="text/html" title="初识Docker" /><published>2018-08-04T00:00:00+00:00</published><updated>2018-08-04T00:00:00+00:00</updated><id>/2018/08/04/Docker</id><content type="html" xml:base="/2018/08/04/Docker.html"></content><author><name>Shenglong</name><email>liushenglong@wemarklinks.com</email></author><category term="容器技术" /><category term="Docker" /><summary type="html"></summary></entry><entry><title type="html">BKDRHash算法</title><link href="/2018/08/04/BKDRHash%E7%AE%97%E6%B3%95.html" rel="alternate" type="text/html" title="BKDRHash算法" /><published>2018-08-04T00:00:00+00:00</published><updated>2018-08-04T00:00:00+00:00</updated><id>/2018/08/04/BKDRHash%E7%AE%97%E6%B3%95</id><content type="html" xml:base="/2018/08/04/BKDRHash%E7%AE%97%E6%B3%95.html">&lt;h3 id=&quot;bkdrhash算法&quot;&gt;BKDRHash算法&lt;/h3&gt;
&lt;p&gt;BKDRHash函数是一种字符串哈希算法, 用于处理大规模字符串数据时为每一个字符串分配一个整数ID。&lt;/p&gt;

&lt;p&gt;BKDRHash算法java实现:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bkdrStrHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Shenglong</name><email>liushenglong@wemarklinks.com</email></author><category term="算法" /><category term="Hash" /><summary type="html">BKDRHash算法 BKDRHash函数是一种字符串哈希算法, 用于处理大规模字符串数据时为每一个字符串分配一个整数ID。 BKDRHash算法java实现: public static int bkdrStrHash(String str){ char c; int hash = 0, seed = 3, index = 0, len = str.length(); for(; index &amp;lt; len; index++) { c = str.charAt(index); hash += Math.pow(seed, len - index - 1) * c; } return hash; }</summary></entry><entry><title type="html">Mysql Database</title><link href="/2018/07/28/Knowledge-Map.html" rel="alternate" type="text/html" title="Mysql Database" /><published>2018-07-28T00:00:00+00:00</published><updated>2018-07-28T00:00:00+00:00</updated><id>/2018/07/28/Knowledge-Map</id><content type="html" xml:base="/2018/07/28/Knowledge-Map.html">&lt;h5 id=&quot;database&quot;&gt;Database&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Mysql&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Redis&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;H2&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Nginx&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Bind9&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://dev.mysql.com/doc/&quot;&gt;Mysql Documentation&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://redis.io/commands&quot;&gt;Redis Commands&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;http://www.h2database.com/html/tutorial.html&quot;&gt;H2 Toturial&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://nginx.org/en/docs/&quot;&gt;Nginx Cookbook&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://www.centos.bz/manual/BIND9-CHS.pdf&quot;&gt;Administrator Reference (Chinese Ver)&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;http://www.mybatis.org/mybatis-3/zh/index.html&quot;&gt;Mybatis3 Documentation&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;go-language&quot;&gt;Go Language&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;ORM&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Go Learing&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;http://doc.gorm.io/database.html&quot;&gt;Guide&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.4.html&quot;&gt;Go Learing&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;github.com/jinzhu/gorm&quot;&gt;Source Code&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://jasperxu.github.io/gorm-zh/&quot;&gt;Documentation(Chinese Ver)&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;linux&quot;&gt;Linux&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://www.tecmint.com/linux-commands-cheat-sheet/&quot;&gt;Commands&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;log-framework&quot;&gt;Log Framework&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://logback.qos.ch/&quot;&gt;Logback Home&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://logback.qos.ch/manual/layouts.html&quot;&gt;Logback Pattern&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Shenglong</name><email>liushenglong@wemarklinks.com</email></author><category term="Documents" /><category term="Knowledge Map" /><summary type="html">Database Mysql Redis H2 Nginx Bind9 Mysql Documentation Redis Commands H2 Toturial Nginx Cookbook Administrator Reference (Chinese Ver) Mybatis3 Documentation         Go Language ORM Go Learing   Guide Go Learing   Source Code     Documentation(Chinese Ver)     Linux       Commands     Log Framework       Logback Home Logback Pattern  </summary></entry><entry><title type="html">碉堡侠的Netty学习日记</title><link href="/2018/07/02/Netty-In-Action.html" rel="alternate" type="text/html" title="碉堡侠的Netty学习日记" /><published>2018-07-02T00:00:00+00:00</published><updated>2018-07-02T00:00:00+00:00</updated><id>/2018/07/02/Netty-In-Action</id><content type="html" xml:base="/2018/07/02/Netty-In-Action.html"></content><author><name>Shenglong</name><email>liushenglong@wemarklinks.com</email></author><category term="netty" /><summary type="html"></summary></entry><entry><title type="html">命题逻辑</title><link href="/2018/06/12/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A61-%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91.html" rel="alternate" type="text/html" title="命题逻辑" /><published>2018-06-12T00:00:00+00:00</published><updated>2018-06-12T00:00:00+00:00</updated><id>/2018/06/12/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A61-%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91</id><content type="html" xml:base="/2018/06/12/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A61-%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91.html">&lt;h1 id=&quot;命题逻辑&quot;&gt;命题逻辑&lt;/h1&gt;
&lt;h2 id=&quot;命题-命题是一个或真或假-的陈述语句&quot;&gt;命题: 命题是一个&lt;em&gt;或真或假&lt;/em&gt; 的&lt;strong&gt;陈述语句&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;命题:
    &lt;blockquote&gt;
      &lt;p&gt;我饿了&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;不是命题:
    &lt;blockquote&gt;
      &lt;p&gt;我爱北京天安门&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;命题中的可变元素称为变元-用字母表示-如果一个命题是真命题-它的真值为真-用t表示-如果他是假命题其真值为假-用f表示&quot;&gt;命题中的可变元素称为变元, 用字母表示. 如果一个命题是真命题, 它的真值为真, 用T表示; 如果他是假命题,其真值为假, 用F表示;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;: 与或非&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;与 - 合取&lt;/li&gt;
  &lt;li&gt;或 - 析取&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;条件语句&quot;&gt;条件语句&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt; 令&lt;em&gt;p&lt;/em&gt;和&lt;em&gt;q&lt;/em&gt;为命题. 条件语句 &lt;code class=&quot;highlighter-rouge&quot;&gt;p→q&lt;/code&gt; 是命题 &quot;若&lt;em&gt;p&lt;/em&gt;则&lt;em&gt;q&lt;/em&gt;&quot;. 当&lt;em&gt;p&lt;/em&gt;为真而&lt;em&gt;q&lt;/em&gt;为假时, 条件语句 &lt;code class=&quot;highlighter-rouge&quot;&gt;p→q&lt;/code&gt;为假, 否则为真. 其中&lt;em&gt;p&lt;/em&gt;为假设(前项,前提),&lt;em&gt;q&lt;/em&gt;称为结论(或推论); 条件语句也称为&lt;strong&gt;蕴含&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;逆倒置与反&quot;&gt;逆、倒置与反&lt;/h3&gt;
&lt;p&gt;已知条件句 &lt;code class=&quot;highlighter-rouge&quot;&gt;p→q&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;逆蕴含: &lt;code class=&quot;highlighter-rouge&quot;&gt;q→p&lt;/code&gt;
倒置蕴含: &lt;code class=&quot;highlighter-rouge&quot;&gt;非q→非p&lt;/code&gt;
反蕴含: &lt;code class=&quot;highlighter-rouge&quot;&gt;非p-&amp;gt;非q&lt;/code&gt;&lt;/p&gt;
  &lt;h3 id=&quot;逻辑运算符的优先级&quot;&gt;逻辑运算符的优先级&lt;/h3&gt;
  &lt;p&gt;非(!) &amp;gt; 逻辑(&amp;amp;,|) &amp;gt; 条件(→)&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Shenglong</name><email>liushenglong@wemarklinks.com</email></author><category term="离散数学" /><summary type="html">命题逻辑 命题: 命题是一个或真或假 的陈述语句 命题: 我饿了 不是命题: 我爱北京天安门 命题中的可变元素称为变元, 用字母表示. 如果一个命题是真命题, 它的真值为真, 用T表示; 如果他是假命题,其真值为假, 用F表示; 定义: 与或非 与 - 合取 或 - 析取 条件语句 定义 令p和q为命题. 条件语句 p→q 是命题 &quot;若p则q&quot;. 当p为真而q为假时, 条件语句 p→q为假, 否则为真. 其中p为假设(前项,前提),q称为结论(或推论); 条件语句也称为蕴含. 逆、倒置与反 已知条件句 p→q 逆蕴含: q→p 倒置蕴含: 非q→非p 反蕴含: 非p-&amp;gt;非q 逻辑运算符的优先级 非(!) &amp;gt; 逻辑(&amp;amp;,|) &amp;gt; 条件(→)</summary></entry></feed>